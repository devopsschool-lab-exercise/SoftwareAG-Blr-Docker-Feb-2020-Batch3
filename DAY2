3.6.91.171
======================

Docker Image is collections of Layer.	- DONE
Each layer is file system		- DONE
Bottom layer is rootfs			- DONE
any other layer on top of is incremental layer (have added+changed+deleted) - DONE
union mounts merge these layers and attached to USER	- DONE
merged layer is RW		- DONE
image layer is RO		- DONE
In case of conflict  - Higher layer wins.	
==============================================

[root@ip-172-31-20-119 docker]# ls -1
builder
buildkit
containers		# Container META
image			# Image Db and LayerDb AKA META
network			# this is for Docker network
overlay2		# This would contains layers - FILESYSTEM 
plugins
runtimes
swarm
tmp
trust
volumes			# this is for Docker volume

    1  clear
    2  ifconfig
    3  clear
    4  ls
    5  sudo yum install -y yum-utils device-mapper-persistent-data lvm2
    6  sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    7  sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    8   sudo yum-config-manager --enable rhui-REGION-rhel-server-extras
    9  sudo yum install -y docker-ce
   10  sudo systemctl enable docker
   11  ifconfig
   12  sudo systemctl start docker
   13  ifconfig
   14  clear
   15  ls
   16  clear
   17  docker info
   18  clear
   19  cd /var/lib/docker
   20  ls -1
   21  clear
   22  ls
   23  cd overlay2
   24  ls
   25  du -sh
   26  cd ../containers/
   27  du -sh
   28  cd ../image/
   29  du -sh
   30  ls
   31  clear
   32  cd ../overlay2/
   33  docker pull ubuntu
   34  ls
   35  du -s --max-depth=1
   36  du -h --max-depth=1
   37  clear
   38  ls
   39  du -h --max-depth=1
   40  cd ./897f23aac380d5982038999d886c0f866b964cebdb02e4d4d744c23fee49895a
   41  ls
   42  clear
   43  ls
   44  cd diff/
   45  ls
   46  cd ..
   47  ls
   48  cd ..
   49  ls
   50  du -h --max-depth=1
   51  cd ./bc525262872070dae2ccc8b09180584808c61ed6e238768fab1df5e4745c9bc3
   52  ls
   53  clear
   54  ls
   55  cd diff/
   56  ls
   57  cd var/
   58  ls
   59  cd cd ..
   60  ls
   61  cd ..
   62  ls
   63  cd ..
   64  ls
   65  cd work/
   66  ls
   67  clear
   68  ls
   69  cd ..
   70  ls
   71  cd ..
   72  ls
   73  clear
   74  ls
   75  cd ../containers/
   76  ls
   77  cd ../image/
   78  ls
   79  tree
   80  yum install tree -y
   81  clear
   82  tree
   83  du -sh
   84  docker images
   85  docker inspect ubuntu
   86  clear
   87  ls
   88  cd ../overlay2/
   89  ls
   90  clear
   91  ls
   92  docker run -itd ubuntu
   93  ls
   94  df -kh
   95  clear
   96  ls
   97  cd 890de89b7980952e8bb7892589a65771bb15227630d1f6a8ff43b9c682e0ebbe
   98  ls
   99  cd merged/
  100  ls
  101  cd ..
  102  ls
  103  cd diff/
  104  ls
  105  clear
  106  ls
  107  cd ..
  108  ls
  109  cd work/
  110  ls
  111  cd work/
  112  ls
  113  cd ..
  114  ls
  115  cd ..
  116  clear
  117  pwd
  118  ls
  119  cd ..
  120  ls
  121  cd ..
  122  pwd
  123  clear
  124  watch find . -name rajesh.txt
  125  docker ps
  126  docker diff 25b110636b57
  127  df -kh
  128  cd 

/var/lib/docker/overlay2/890de89b7980952e8bb7892589a65771bb15227630d1f6a8ff43b9c682e0ebbe/merged
  129  clear
  130  ls
  131  cd etc/
  132  ls
  133  more issue
  134  cd ..
  135  ls
  136  cd ..
  137  clear
  138  ls
  139  cd diff/
  140  ls
  141  cd root/
  142  ls
  143  cd ..
  144  ls
  145  cd opt/
  146  ls
  147  cd ..
  148  ls
  149  clear
  150  cd etc/
  151  ls
  152  more issue
  153  clar
  154  clear
  155  docker images
  156  docker history ubuntu
  157  history
  1  cd /opt/
    2  ls
    3  touch rajesh.txt
    4  exit
    5  clear
    6  ls
    7  cd etc/
    8  ls
    9  rm -rf legal
   10  clear
   11  ls
   12  cat >> issue
   13  more issue
   14  history




=======================================
How to create images?
======================================================
Lazy way - Using Existing Container
===========================================
docker commit -m"ub-git" -a"Rajeshkumar" 25b110636b57 ub-git

  7  docker start 25b110636b57
    8  df -kh
    9  clear
   10  docker ps
   11  docker attach 25b110636b57
   12  docker ps
   13  docker ps -a
   14  docker ps
   15  docker start 25b110636b57
   16  clear
   17  docker attach 25b110636b57

apt-get update
apt-get insatll git

   18  docker ps -a
   19  docker start 25b110636b57
   20  docker exec 25b110636b57 git
   21  clear
   22  git
   23  docker ps
   24  clear
   25  docker images
   26  docker commit -m"ub-git" -a"Rajeshkumar" 25b110636b57 ub-git
   27  docker images
   28  cd /var/lib/docker
   29  ls
   30  cd overlay2/
   31  ls
   32  clear
   33  ls
   34  docker ps -a
   35  docker stop 25b110636b57
   36  docker rm 25b110636b57
   37  clear
   38  ls
   39  du -h --max-depth=1
   40  cd ./a66cf45c75cc2f5cbb72c355bdfe1b76bd2224646b7b3feb4a87410ea1aee6e3
   41  clear
   42  ls
   43  cd diff/
   44  ls
   45  tree
   46  clear
   47  docker images
   48  docker history ubuntu
   49  docker history ub-git
   50  history

Automated Way  - Using Dockerfile


TASKS
===========================================
jenkins
===========================
IP - 3.6.91.171
ec2-user

Jenkins Container is running with - WHICH USER?
Jenkins Container is running with - WHICH PORT?
Jenkins Container is running with - WHICH EXTRA VOL?
Jenkins Container is running with - WHICH ENV?

Jenkins
	openjdk:8-jdk
		buildpack-deps:buster-scm
			buildpack-deps:buster-curl
				debian:buster
					scratch

====================================================
Understanding a Dockerfile
- Each line is creating one LAYEr (DATA + META)
- Next line layer parent is previous line layer
- Each Layer would be created From the BASE image.
=============================================================
FROM
MAINTAINER
RUN
COPY
USER
EXPOSE
VOLUME
ENV
ARG

CMD
ENTRYPOINT
============================================
FROM ubuntu
MAINTAINER Rajeshkumar DevOps@Rajeshkumar.xyz
COPY original-ks.cfg /opt
RUN touch /opt/rajesh1.txt
RUN touch /opt/rajesh2.txt
RUN touch /opt/rajesh3.txt

docker build -t img1 .

  66  clear
   67  ls
   68  docker imatges
   69  docker images
   70  ls
   71  c
   72  clear
   73  ls
   74  vi dockerfile
   75  docker build -t img1 .
   76  cd /var/lib/docker
   77  find . -name rajesh*
   78  find . -name original-ks.cfg
   79  clear


FROM ubuntu
MAINTAINER Rajeshkumar DevOps@Rajeshkumar.xyz
RUN apt-get udpate && apt-get insatll git -y && apt-get insatll apache2

163  vi doc1
  164  docker build -f doc1 -t img2 .
  165  vi doc1
  166  docker build -f doc1 -t img2 .
  167  vi doc1
  168  docker build -f doc1 -t img2 .
  169  vi doc1
  170  docker build -f doc1 -t img2 .
  171  docker images
  172  history

======================================================
How to share Imges?
==============================================
- Tar ball

 90  docker images
   91  docker save -o img2.tar img2
   92  ls
   93  docker ps -a
   94  docker rm 02bd63138961 e2c0c35a6240 768a4634625c
   95  clear
   96  docker ps pa-
   97  docker ps -a
   98  clear
   99  docker images
  100  docker rmi img2 img1 ubuntu
  101  clear
  102  docker images
  103  ls
  104  docker load -i img2.tar
  105  docker images
  106  history


- Public registry such as hub.docker.com
  105  docker images
  106  history
  107  clear
  108  ls
  109  docker images
  110  docker login
  111  docker login
  112  clear
  113  ls
  114  docker images
  115  docker push img2
  116  docker images
  117  docker tag img2 scmgalaxy/lastdocsag
  118  docker images
  119  docker push scmgalaxy/lastdocsag
  120  history


- Pvt Registry such as Artifactory

How to set PID 1???

Method to execute...
1. EXEC WAY
/bin/echo rajesh kumar
/bin/python my.py

2. SHELL WAY
echo rajesh
python my.py

==============================================
CMD vs ENTRYPOINT
=============================================
CMD 
	CMD can be REPLACED during run time.

ENTRYPOINT
	ENTRYPOINT can not be replaced during run time.
	CMD passed to the image ...Add as a parameter to ENTRYPOINT

	

  "Entrypoint": [
                "/bin/tini",
                "--",
                "/usr/local/bin/jenkins.sh"
            ],

/bin/tini -- /usr/local/bin/jenkins.sh

  "Entrypoint": [
                "/bin/tini",
                "--",
                "/usr/local/bin/jenkins.sh"
            ],
],
            "Cmd": [
                "ls"'

 /bin/tini -- /usr/local/bin/jenkins.sh ls


================================================================
Task 1 - Validate and Understand a Anatomy of Image.
- Docker Image is collections of Layer.	- DONE
- Each layer is file system		- DONE
- Bottom layer is rootfs			- DONE
- any other layer on top of is incremental layer (have added+changed+deleted) - DONE
- union mounts merge these layers and attached to USER	- DONE
- merged layer is RW		- DONE
- image layer is RO		- DONE
- In case of conflict  - Higher layer wins.

Task 2 - Create a image using container with GIT + Apache 2

Task 3 - register at hub.docker.com and Push this image

Task 4 - Create a TAR ball of the image.

Task 5 - Write a Dockerfile which has Base - ubuntu && App -- Apache2 in running && copy index.html 

into /var/www/html/ and content of index.html must be "Welcome to Docker" My Name is RAAA" && expose 

at 80 port of your HOST MACHINE.

Task 6 - Create a 5 Images following..
https://www.devopsschool.com/tutorial/docker/dockerfile/dockerfile-example-sample-lab.html
and use it.


1 35.154.36.234
2 52.66.206.49		DONE
3 15.206.146.3		
4 13.232.81.60		DONE
5 15.206.27.7		DONE
6 13.232.209.98
7 13.234.213.41		DONE
8 13.235.104.211	DONE
9 35.154.93.98
10 52.66.91.125		DONE
11 13.127.97.224
12 35.154.4.55
13 13.235.133.220
14 13.233.173.55
15 13.127.178.16
16 3.6.36.154
17 13.232.167.127	DONE

18 15.206.173.234
19 13.235.115.176
20 13.126.169.98


https://www.devopsschool.com/blog/restore-a-default-rhel-7-x-default-repo-list/
=================================================================
Volume
===============
Prb - How to have data persitency?

Docker Volume
https://www.devopsschool.com/blog/understand-docker-volume-from-beginner-to-deep-dive-level/

- volume ----
- mount
- tmpfs


Container networking
============================
Bridge 
	
HOST
NONE







 405  docker ps -a
  406  docker ps -a
  407  docker stop 04abb2d00a50
  408  docker rm 04abb2d00a50
  409  clear
  410  cd /var/lib/docker
  411  ls
  412  cd volumes
  413  ls
  414  cd 4a2b51a70705f458251f23f0bcbac7ca70a24101c207613f92384e3efde2a3bb
  415  clear
  416  ks
  417  ls
  418  cd _data/
  419  ls
  420  cd ..
  421  ls
  422  cd ..
  423  ls
  424  cd 187e287b99a66f37c4311a47bd5c0b5be37d3753ed5e3f0dd9c877f7d2eb5096
  425  ls
  426  cd _data/
  427  ls
  428  clear
  429  ls
  430  cd ..
  431  ls
  432  clear
  433  cd ..
  434  ls
  435  docker volume
  436  docker volume ls
  437  docker volume purne
  438  docker volume prune
  439  docker volume ls
  440  ls
  441  docker volume create dev
  442  ls
  443  docker run -itd -v dev:/opt/raju ubuntu
  444  docker attach a00a655fb19b1ce0957bbbb16c2737dc3e14b0093b2233dda65d62de35c1ff7b
  445  ls
  446  cd dev/
  447  ls
  448  cd _data/
  449  ls
  450  touch ddd
  451  ls
  452  docker attach a00a655fb19b1ce0957bbbb16c2737dc3e14b0093b2233dda65d62de35c1ff7b
  453  ls
  454  docker ps -a
  455  docker rm  a00a655fb19b
  456  ls
  457  clear
  458  cd /opt/
  459  ls
  460  mkdir bkp
  461  ls
  462  cd bkp/
  463  ls
  464  pwd
  465  docker run -it -v /opt/bkp:/opt/imp ubuntu
  466  ls
  467  pwd
  468  clear
  469  cd
  470  ls
  471  docker ps -a
  472  docker stop 5abe9d584470
  473  clear
  474  docker ps -a
  475  docker rm 5abe9d584470
  476  clea
  477  clear
  478  docker ps -a
  479  ifconfig
  480  clear
  481  docker network
  482  docker network ls
  483  clear
  484  docker network ls
  485  docker network inspect 6c661f5b85d5
  486  clear
  487  docker run -itd ubuntu
  488  docker ps
  489  docker inspect 76a40c0776e5
  490  docker network
  491  docker network create dev --driver=bridge
  492  docker network ls
  493  docker network inspect dev
  494  docker run -itd --net=dev ubuntu
  495  docker ps
  496  docker inspect d158f48da498
  497  clear
  498  docker network ls
  499  docker network
  500  docker ps
  501  docker network connect dev 76a40c0776e5
  502  docker inspect 76a40c0776e5
  503  docker network
  504  history

https://www.devopsschool.com/notes/docker/commands-collections/docker-networking.txt

===================================================================================
DOCKER COMPOSE
=================================


version: '2'
services:
  wordpress:
    image: wordpress:latest # https://hub.docker.com/_/wordpress/
    ports:
      - 127.0.0.1:80:80 # change ip if required
    volumes:
      - ./wp-app:/var/www/html # Full wordpress project
      #- ./plugin-name/trunk/:/var/www/html/wp-content/plugins/plugin-name # Plugin development
      #- ./theme-name/trunk/:/var/www/html/wp-content/themes/theme-name # Theme development
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_NAME: wordpress
      WORDPRESS_DB_USER: root
      WORDPRESS_DB_PASSWORD: password
    depends_on:
      - db
    networks:
      - wordpress-network
  db:
    image: mysql:latest # https://hub.docker.com/_/mysql/ - or mariadb 

https://hub.docker.com/_/mariadb
    ports:
      - 127.0.0.1:3306:3306 # change ip if required
    volumes:
      - ./wp-data:/docker-entrypoint-initdb.d
    environment:
      MYSQL_DATABASE: wordpress
      MYSQL_ROOT_PASSWORD: password
    networks:
      - wordpress-network
networks:
  wordpress-network:
      driver: bridge

====================================================
http://bit.ly/2T1Z40M

=======================================
TUTORIALS
https://www.devopsschool.com/tutorial/

HTML SLIDES
https://www.devopsschool.com/slides/

PDF
https://www.devopsschool.com/pdf/

Example programs
https://github.com/devops-school
https://github.com/orgs/devopsschool-classroom/dashboard
https://github.com/orgs/devopsschool-lab-exercise/dashboard
https://github.com/orgs/devopsschool-projects/dashboard
https://github.com/orgs/devopsschool-sample-projects/dashboard

Blogs
https://www.devopsschool.com/blog/

QUIZ
https://www.devopsschool.com/lms/

Videos
https://www.youtube.com/channel/UCrXr49kBvXJeQMMl2693c4g
https://www.devopsschool.com/videos/

QA
https://www.devopsschool.com/interview/

COMMAND
==========
https://www.devopsschool.com/commands

https://www.devopsschool.com/blog/how-to-update-certificates-in-linkedin-under-licenses-

certifications/

Feedback
=============
Public 

Private























 
